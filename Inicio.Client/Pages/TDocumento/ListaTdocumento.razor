@page "/api/TDocumentos"
@inject IHttpServicio http
@inject NavigationManager navigationManager
@inject IJSRuntime js

<h3>Lista de tipos de documento</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success" role="alert">
        @mensaje
    </div>
}
<br />
<a class="btn btn-primary" href="/api/TDocumentos/crear">Nuevo tipo de documento</a>
<br />

<table class="table table-striped" style="border-spacing: 0; width: 100%; table-layout: fixed;">
    <!-- Fija el ancho de la tabla -->
    <tr>
        <th style="padding: 4px; width: 20%;">Codigo</th> <!-- Reducir ancho -->
        <th style="padding: 4px; width: 60%;">Nombre</th> <!-- Aumentar ancho de la columna nombre -->
        <th style="padding: 4px; width: 20%;">Acciones</th> <!-- Aumentar espacio para acciones -->
    </tr>
    @if (Mensaje == "")
    {
        @if (listaDocumentos == null)
        {
            <p>Buscando....</p>
        }
        else if (listaDocumentos.Count == 0)
        {
            <p>No existen tipos de documentos</p>
        }
        else
        {
            @foreach (var item in listaDocumentos)
            {
                <tr>
                    <td style="padding: 4px;">@item.Codigo</td>
                    <td style="padding: 4px;">@item.Nombre</td>
                    <td style="padding: 4px; width: 1%;">
                        <div style="display: flex; justify-content: center;">
                            <a class="btn btn-primary btn-md" href="api/TDocumentos/editar/@item.Id" style="margin-right: 10px; width: 120px;">
                                Editar
                            </a>
                            <a class="btn @($"btn-danger {(isLoading.ContainsKey(item.Id) && isLoading[item.Id] ? "disabled" : "")}")"
                               type="button"
                               disabled="@(isLoading.ContainsKey(item.Id) && isLoading[item.Id])"
                               @onclick="() => ConfirmarEliminar(item.Id)"
                               style="width: 120px; display: flex; justify-content: center; align-items: center; min-width: 150px; padding: 6px 10px;">
                                @if (isLoading.ContainsKey(item.Id) && isLoading[item.Id])
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span style="margin-left: 5px;">Eliminando...</span>
                                }
                                else
                                {
                                    <span>Eliminar</span>
                                }
                            </a>

                        </div>

                    </td>
                </tr>
            }
        }
    }
    else
    {
        <p>Error: @Mensaje</p>
    }
</table>

@code {
    List<TDocumento> listaDocumentos;
    [Parameter] public int tDocumentoId { get; set; }
    private TDocumento tDocumento = new TDocumento();
    private Dictionary<int, bool> isLoading = new Dictionary<int, bool>();  // Controlar el estado de carga para cada botón

    string Mensaje = "";
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<TDocumento>>("api/TDocumentos");
        if (!resp.Error)
        {
            listaDocumentos = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    public class SwalResult
    {
        public bool? isConfirmed { get; set; }
        public bool? isDenied { get; set; }
        public bool? isDismissed { get; set; }
    }

    private async Task ConfirmarEliminar(int id)
    {
        var result = await js.InvokeAsync<SwalResult>("Swal.fire", new
        {
            title = "¿Está seguro?",
            text = "¡No podrás revertir esto!",
            icon = "warning",
            showCancelButton = true,
            confirmButtonColor = "#3085d6",
            cancelButtonColor = "#d33",
            confirmButtonText = "Sí, eliminarlo!",
            cancelButtonText = "Cancelar"
        });

        if (result != null && result.isConfirmed == true)
        {
            isLoading[id] = true;  // Cambiar el estado a "cargando" solo para el botón correspondiente
            StateHasChanged(); // Forzar la actualización de la UI

            await Task.Delay(3000);  // Simular un proceso de carga durante 3 segundos

            // Llamada a la función de eliminación
            await Eliminar(id);

            isLoading[id] = false;  // Restaurar el estado del botón
            StateHasChanged(); // Actualizar la UI

            await js.InvokeVoidAsync("mostrarAlerta", "Documento Eliminado");
        }
        else
        {
            Console.WriteLine("Eliminación cancelada.");
        }
    }

    private async Task Eliminar(int id)
    {
        var response = await http.Delete($"api/TDocumentos/{id}", tDocumento);
        await Leer(); // Recargar la lista de documentos
    }

    private string mensaje;
}

